name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 금칙어 게이트 - "AI" 문자열 체크
  forbidden-word-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for forbidden words
        run: |
          echo "Checking for forbidden words in public assets..."
          
          # 공개 UI/문서/알림에서 "AI" 문자열 금지
          FORBIDDEN_PATTERNS=(
            "src/routes/**/*.svelte"
            "src/lib/components/**/*.svelte"
            "src/app.html"
            "README.md"
            "*.md"
          )
          
          VIOLATIONS=()
          
          for pattern in "${FORBIDDEN_PATTERNS[@]}"; do
            if find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f -name "$pattern" -print | grep -q .; then
              FILES=$(find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f -name "$pattern" -print)
              for file in $FILES; do
                if grep -i "AI" "$file" > /dev/null 2>&1; then
                  VIOLATIONS+=("$file")
                fi
              done
            fi
          done
          
          if [ ${#VIOLATIONS[@]} -gt 0 ]; then
            echo "❌ Forbidden word 'AI' found in public assets:"
            for violation in "${VIOLATIONS[@]}"; do
              echo "  - $violation"
              grep -n -i "AI" "$violation" | head -5
            done
            echo ""
            echo "Please remove or replace 'AI' strings in public-facing files."
            echo "Internal code/DB usage of 'ai_type' is allowed."
            exit 1
          else
            echo "✅ No forbidden words found in public assets"
          fi

  # 타입 체크
  typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        run: pnpm --filter @sugar/admin check

  # 린트
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint
        run: pnpm --filter @sugar/admin lint

  # 테스트
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run tests
        run: pnpm --filter @sugar/admin test

  # 빌드 테스트
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build
        run: pnpm --filter @sugar/admin build

  # D1 마이그레이션 dry-run (스테이징 환경)
  migration-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: D1 Migration Dry Run
        run: |
          echo "D1 migration dry-run would be executed here"
          echo "In production, this would run: wrangler d1 migrations list --env=staging"

  # 스테이징 배포
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [forbidden-word-check, typecheck, lint, test, build, migration-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          echo "In production, this would run: wrangler deploy --env=staging"
          # 실제 배포는 Cloudflare Workers 계정 설정 후 활성화

  # 프로덕션 배포 (태그 시)
  deploy-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [forbidden-word-check, typecheck, lint, test, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          echo "In production, this would run: wrangler deploy --env=production"
          # 실제 배포는 Cloudflare Workers 계정 설정 후 활성화